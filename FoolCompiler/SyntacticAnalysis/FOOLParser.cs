//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from FOOL.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419


using System.Collections.Generic;

using System;
using System.IO;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class FOOLParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		SEMIC=1, COLON=2, COMMA=3, EQ=4, ASM=5, PLUS=6, MINUS=7, TIMES=8, DIV=9, 
		TRUE=10, FALSE=11, LPAR=12, RPAR=13, CLPAR=14, CRPAR=15, IF=16, THEN=17, 
		ELSE=18, LET=19, IN=20, VAR=21, FUN=22, INT=23, BOOL=24, OR=25, AND=26, 
		NOT=27, GREATERTHAN=28, LESSERTHAN=29, GREATEREQUAL=30, LESSEREQUAL=31, 
		VOID=32, CLASS=33, THIS=34, NEW=35, DOT=36, EXTENDS=37, NULL=38, INTEGER=39, 
		ID=40, WS=41, LINECOMENTS=42, BLOCKCOMENTS=43;
	public const int
		RULE_prog = 0, RULE_let = 1, RULE_classdec = 2, RULE_letVar = 3, RULE_vardec = 4, 
		RULE_varasm = 5, RULE_fun = 6, RULE_dec = 7, RULE_met = 8, RULE_type = 9, 
		RULE_exp = 10, RULE_term = 11, RULE_factor = 12, RULE_value = 13, RULE_functioncall = 14, 
		RULE_stm = 15, RULE_stms = 16;
	public static readonly string[] ruleNames = {
		"prog", "let", "classdec", "letVar", "vardec", "varasm", "fun", "dec", 
		"met", "type", "exp", "term", "factor", "value", "functioncall", "stm", 
		"stms"
	};

	private static readonly string[] _LiteralNames = {
		null, "';'", "':'", "','", "'=='", "'='", "'+'", "'-'", "'*'", "'/'", 
		"'true'", "'false'", "'('", "')'", "'{'", "'}'", "'if'", "'then'", "'else'", 
		"'let'", "'in'", "'var'", "'fun'", "'int'", "'bool'", "'||'", "'&&'", 
		"'not'", "'>'", "'<'", "'>='", "'<='", "'void'", "'class'", "'this'", 
		"'new'", "'.'", "'extends'", "'null'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "SEMIC", "COLON", "COMMA", "EQ", "ASM", "PLUS", "MINUS", "TIMES", 
		"DIV", "TRUE", "FALSE", "LPAR", "RPAR", "CLPAR", "CRPAR", "IF", "THEN", 
		"ELSE", "LET", "IN", "VAR", "FUN", "INT", "BOOL", "OR", "AND", "NOT", 
		"GREATERTHAN", "LESSERTHAN", "GREATEREQUAL", "LESSEREQUAL", "VOID", "CLASS", 
		"THIS", "NEW", "DOT", "EXTENDS", "NULL", "INTEGER", "ID", "WS", "LINECOMENTS", 
		"BLOCKCOMENTS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "FOOL.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static FOOLParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public FOOLParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public FOOLParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgContext : ParserRuleContext {
		public ProgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prog; } }
	 
		public ProgContext() { }
		public virtual void CopyFrom(ProgContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ClassExpContext : ProgContext {
		public ITerminalNode IN() { return GetToken(FOOLParser.IN, 0); }
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public ITerminalNode SEMIC() { return GetToken(FOOLParser.SEMIC, 0); }
		public StmsContext stms() {
			return GetRuleContext<StmsContext>(0);
		}
		public ClassdecContext[] classdec() {
			return GetRuleContexts<ClassdecContext>();
		}
		public ClassdecContext classdec(int i) {
			return GetRuleContext<ClassdecContext>(i);
		}
		public LetContext let() {
			return GetRuleContext<LetContext>(0);
		}
		public ClassExpContext(ProgContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFOOLVisitor<TResult> typedVisitor = visitor as IFOOLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LetInExpContext : ProgContext {
		public LetContext let() {
			return GetRuleContext<LetContext>(0);
		}
		public ITerminalNode IN() { return GetToken(FOOLParser.IN, 0); }
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public ITerminalNode SEMIC() { return GetToken(FOOLParser.SEMIC, 0); }
		public StmsContext stms() {
			return GetRuleContext<StmsContext>(0);
		}
		public LetInExpContext(ProgContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFOOLVisitor<TResult> typedVisitor = visitor as IFOOLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLetInExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SingleExpContext : ProgContext {
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public ITerminalNode SEMIC() { return GetToken(FOOLParser.SEMIC, 0); }
		public SingleExpContext(ProgContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFOOLVisitor<TResult> typedVisitor = visitor as IFOOLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSingleExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgContext prog() {
		ProgContext _localctx = new ProgContext(Context, State);
		EnterRule(_localctx, 0, RULE_prog);
		int _la;
		try {
			State = 60;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case MINUS:
			case TRUE:
			case FALSE:
			case LPAR:
			case IF:
			case NOT:
			case NEW:
			case INTEGER:
			case ID:
				_localctx = new SingleExpContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 34; exp();
				State = 35; Match(SEMIC);
				}
				break;
			case LET:
				_localctx = new LetInExpContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 37; let();
				State = 38; Match(IN);
				State = 43;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
				case 1:
					{
					State = 39; exp();
					State = 40; Match(SEMIC);
					}
					break;
				case 2:
					{
					State = 42; stms();
					}
					break;
				}
				}
				break;
			case CLASS:
				_localctx = new ClassExpContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 46;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 45; classdec();
					}
					}
					State = 48;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==CLASS );
				State = 51;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LET) {
					{
					State = 50; let();
					}
				}

				State = 53; Match(IN);
				State = 58;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
				case 1:
					{
					State = 54; exp();
					State = 55; Match(SEMIC);
					}
					break;
				case 2:
					{
					State = 57; stms();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LetContext : ParserRuleContext {
		public ITerminalNode LET() { return GetToken(FOOLParser.LET, 0); }
		public DecContext[] dec() {
			return GetRuleContexts<DecContext>();
		}
		public DecContext dec(int i) {
			return GetRuleContext<DecContext>(i);
		}
		public ITerminalNode[] SEMIC() { return GetTokens(FOOLParser.SEMIC); }
		public ITerminalNode SEMIC(int i) {
			return GetToken(FOOLParser.SEMIC, i);
		}
		public LetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_let; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFOOLVisitor<TResult> typedVisitor = visitor as IFOOLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLet(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LetContext let() {
		LetContext _localctx = new LetContext(Context, State);
		EnterRule(_localctx, 2, RULE_let);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 62; Match(LET);
			State = 66;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 63; dec();
				State = 64; Match(SEMIC);
				}
				}
				State = 68;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INT) | (1L << BOOL) | (1L << VOID) | (1L << ID))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassdecContext : ParserRuleContext {
		public ITerminalNode CLASS() { return GetToken(FOOLParser.CLASS, 0); }
		public ITerminalNode[] ID() { return GetTokens(FOOLParser.ID); }
		public ITerminalNode ID(int i) {
			return GetToken(FOOLParser.ID, i);
		}
		public ITerminalNode SEMIC() { return GetToken(FOOLParser.SEMIC, 0); }
		public ITerminalNode EXTENDS() { return GetToken(FOOLParser.EXTENDS, 0); }
		public ITerminalNode LPAR() { return GetToken(FOOLParser.LPAR, 0); }
		public VardecContext[] vardec() {
			return GetRuleContexts<VardecContext>();
		}
		public VardecContext vardec(int i) {
			return GetRuleContext<VardecContext>(i);
		}
		public ITerminalNode RPAR() { return GetToken(FOOLParser.RPAR, 0); }
		public ITerminalNode CLPAR() { return GetToken(FOOLParser.CLPAR, 0); }
		public ITerminalNode CRPAR() { return GetToken(FOOLParser.CRPAR, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(FOOLParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(FOOLParser.COMMA, i);
		}
		public MetContext[] met() {
			return GetRuleContexts<MetContext>();
		}
		public MetContext met(int i) {
			return GetRuleContext<MetContext>(i);
		}
		public ClassdecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classdec; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFOOLVisitor<TResult> typedVisitor = visitor as IFOOLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassdec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassdecContext classdec() {
		ClassdecContext _localctx = new ClassdecContext(Context, State);
		EnterRule(_localctx, 4, RULE_classdec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 70; Match(CLASS);
			State = 71; Match(ID);
			State = 74;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EXTENDS) {
				{
				State = 72; Match(EXTENDS);
				State = 73; Match(ID);
				}
			}

			State = 87;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LPAR) {
				{
				State = 76; Match(LPAR);
				State = 77; vardec();
				State = 82;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 78; Match(COMMA);
					State = 79; vardec();
					}
					}
					State = 84;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 85; Match(RPAR);
				}
			}

			State = 97;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CLPAR) {
				{
				State = 89; Match(CLPAR);
				State = 93;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INT) | (1L << BOOL) | (1L << VOID) | (1L << ID))) != 0)) {
					{
					{
					State = 90; met();
					}
					}
					State = 95;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 96; Match(CRPAR);
				}
			}

			State = 99; Match(SEMIC);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LetVarContext : ParserRuleContext {
		public ITerminalNode LET() { return GetToken(FOOLParser.LET, 0); }
		public VarasmContext[] varasm() {
			return GetRuleContexts<VarasmContext>();
		}
		public VarasmContext varasm(int i) {
			return GetRuleContext<VarasmContext>(i);
		}
		public LetVarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_letVar; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFOOLVisitor<TResult> typedVisitor = visitor as IFOOLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLetVar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LetVarContext letVar() {
		LetVarContext _localctx = new LetVarContext(Context, State);
		EnterRule(_localctx, 6, RULE_letVar);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 101; Match(LET);
			State = 103;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 102; varasm();
				}
				}
				State = 105;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INT) | (1L << BOOL) | (1L << ID))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VardecContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode ID() { return GetToken(FOOLParser.ID, 0); }
		public VardecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vardec; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFOOLVisitor<TResult> typedVisitor = visitor as IFOOLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVardec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VardecContext vardec() {
		VardecContext _localctx = new VardecContext(Context, State);
		EnterRule(_localctx, 8, RULE_vardec);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 107; type();
			State = 108; Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarasmContext : ParserRuleContext {
		public VardecContext vardec() {
			return GetRuleContext<VardecContext>(0);
		}
		public ITerminalNode ASM() { return GetToken(FOOLParser.ASM, 0); }
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public ITerminalNode NULL() { return GetToken(FOOLParser.NULL, 0); }
		public VarasmContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varasm; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFOOLVisitor<TResult> typedVisitor = visitor as IFOOLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarasm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarasmContext varasm() {
		VarasmContext _localctx = new VarasmContext(Context, State);
		EnterRule(_localctx, 10, RULE_varasm);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 110; vardec();
			State = 111; Match(ASM);
			State = 114;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case MINUS:
			case TRUE:
			case FALSE:
			case LPAR:
			case IF:
			case NOT:
			case NEW:
			case INTEGER:
			case ID:
				{
				State = 112; exp();
				}
				break;
			case NULL:
				{
				State = 113; Match(NULL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(FOOLParser.ID, 0); }
		public ITerminalNode LPAR() { return GetToken(FOOLParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(FOOLParser.RPAR, 0); }
		public ITerminalNode CLPAR() { return GetToken(FOOLParser.CLPAR, 0); }
		public ITerminalNode CRPAR() { return GetToken(FOOLParser.CRPAR, 0); }
		public ITerminalNode VOID() { return GetToken(FOOLParser.VOID, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public ITerminalNode SEMIC() { return GetToken(FOOLParser.SEMIC, 0); }
		public StmsContext stms() {
			return GetRuleContext<StmsContext>(0);
		}
		public VardecContext[] vardec() {
			return GetRuleContexts<VardecContext>();
		}
		public VardecContext vardec(int i) {
			return GetRuleContext<VardecContext>(i);
		}
		public LetVarContext letVar() {
			return GetRuleContext<LetVarContext>(0);
		}
		public ITerminalNode IN() { return GetToken(FOOLParser.IN, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(FOOLParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(FOOLParser.COMMA, i);
		}
		public FunContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fun; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFOOLVisitor<TResult> typedVisitor = visitor as IFOOLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFun(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunContext fun() {
		FunContext _localctx = new FunContext(Context, State);
		EnterRule(_localctx, 12, RULE_fun);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 118;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case VOID:
				{
				State = 116; Match(VOID);
				}
				break;
			case INT:
			case BOOL:
			case ID:
				{
				State = 117; type();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 120; Match(ID);
			State = 121; Match(LPAR);
			State = 130;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INT) | (1L << BOOL) | (1L << ID))) != 0)) {
				{
				State = 122; vardec();
				State = 127;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 123; Match(COMMA);
					State = 124; vardec();
					}
					}
					State = 129;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 132; Match(RPAR);
			State = 133; Match(CLPAR);
			State = 137;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LET) {
				{
				State = 134; letVar();
				State = 135; Match(IN);
				}
			}

			State = 143;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				{
				State = 139; exp();
				State = 140; Match(SEMIC);
				}
				break;
			case 2:
				{
				State = 142; stms();
				}
				break;
			}
			State = 145; Match(CRPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DecContext : ParserRuleContext {
		public VarasmContext varasm() {
			return GetRuleContext<VarasmContext>(0);
		}
		public FunContext fun() {
			return GetRuleContext<FunContext>(0);
		}
		public DecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dec; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFOOLVisitor<TResult> typedVisitor = visitor as IFOOLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DecContext dec() {
		DecContext _localctx = new DecContext(Context, State);
		EnterRule(_localctx, 14, RULE_dec);
		try {
			State = 149;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 147; varasm();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 148; fun();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MetContext : ParserRuleContext {
		public FunContext fun() {
			return GetRuleContext<FunContext>(0);
		}
		public MetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_met; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFOOLVisitor<TResult> typedVisitor = visitor as IFOOLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMet(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MetContext met() {
		MetContext _localctx = new MetContext(Context, State);
		EnterRule(_localctx, 16, RULE_met);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 151; fun();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public ITerminalNode INT() { return GetToken(FOOLParser.INT, 0); }
		public ITerminalNode BOOL() { return GetToken(FOOLParser.BOOL, 0); }
		public ITerminalNode ID() { return GetToken(FOOLParser.ID, 0); }
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFOOLVisitor<TResult> typedVisitor = visitor as IFOOLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 18, RULE_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 153;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INT) | (1L << BOOL) | (1L << ID))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpContext : ParserRuleContext {
		public TermContext left;
		public ExpContext right;
		public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		public ITerminalNode PLUS() { return GetToken(FOOLParser.PLUS, 0); }
		public ITerminalNode MINUS() { return GetToken(FOOLParser.MINUS, 0); }
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public ExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exp; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFOOLVisitor<TResult> typedVisitor = visitor as IFOOLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpContext exp() {
		ExpContext _localctx = new ExpContext(Context, State);
		EnterRule(_localctx, 20, RULE_exp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 155; _localctx.left = term();
			State = 158;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PLUS || _la==MINUS) {
				{
				State = 156;
				_la = TokenStream.LA(1);
				if ( !(_la==PLUS || _la==MINUS) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 157; _localctx.right = exp();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		public FactorContext left;
		public TermContext right;
		public FactorContext factor() {
			return GetRuleContext<FactorContext>(0);
		}
		public ITerminalNode TIMES() { return GetToken(FOOLParser.TIMES, 0); }
		public ITerminalNode DIV() { return GetToken(FOOLParser.DIV, 0); }
		public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFOOLVisitor<TResult> typedVisitor = visitor as IFOOLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		TermContext _localctx = new TermContext(Context, State);
		EnterRule(_localctx, 22, RULE_term);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 160; _localctx.left = factor();
			State = 163;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TIMES || _la==DIV) {
				{
				State = 161;
				_la = TokenStream.LA(1);
				if ( !(_la==TIMES || _la==DIV) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 162; _localctx.right = term();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FactorContext : ParserRuleContext {
		public ValueContext left;
		public IToken logicoperator;
		public FactorContext right;
		public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public FactorContext factor() {
			return GetRuleContext<FactorContext>(0);
		}
		public ITerminalNode EQ() { return GetToken(FOOLParser.EQ, 0); }
		public ITerminalNode GREATERTHAN() { return GetToken(FOOLParser.GREATERTHAN, 0); }
		public ITerminalNode LESSERTHAN() { return GetToken(FOOLParser.LESSERTHAN, 0); }
		public ITerminalNode GREATEREQUAL() { return GetToken(FOOLParser.GREATEREQUAL, 0); }
		public ITerminalNode LESSEREQUAL() { return GetToken(FOOLParser.LESSEREQUAL, 0); }
		public ITerminalNode AND() { return GetToken(FOOLParser.AND, 0); }
		public ITerminalNode OR() { return GetToken(FOOLParser.OR, 0); }
		public FactorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_factor; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFOOLVisitor<TResult> typedVisitor = visitor as IFOOLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFactor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FactorContext factor() {
		FactorContext _localctx = new FactorContext(Context, State);
		EnterRule(_localctx, 24, RULE_factor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 165; _localctx.left = value();
			State = 168;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EQ) | (1L << OR) | (1L << AND) | (1L << GREATERTHAN) | (1L << LESSERTHAN) | (1L << GREATEREQUAL) | (1L << LESSEREQUAL))) != 0)) {
				{
				State = 166;
				_localctx.logicoperator = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EQ) | (1L << OR) | (1L << AND) | (1L << GREATERTHAN) | (1L << LESSERTHAN) | (1L << GREATEREQUAL) | (1L << LESSEREQUAL))) != 0)) ) {
					_localctx.logicoperator = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 167; _localctx.right = factor();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
	 
		public ValueContext() { }
		public virtual void CopyFrom(ValueContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class BaseExpContext : ValueContext {
		public ITerminalNode LPAR() { return GetToken(FOOLParser.LPAR, 0); }
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public ITerminalNode RPAR() { return GetToken(FOOLParser.RPAR, 0); }
		public BaseExpContext(ValueContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFOOLVisitor<TResult> typedVisitor = visitor as IFOOLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBaseExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IntValContext : ValueContext {
		public ITerminalNode INTEGER() { return GetToken(FOOLParser.INTEGER, 0); }
		public ITerminalNode MINUS() { return GetToken(FOOLParser.MINUS, 0); }
		public IntValContext(ValueContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFOOLVisitor<TResult> typedVisitor = visitor as IFOOLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntVal(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MethExpContext : ValueContext {
		public ITerminalNode ID() { return GetToken(FOOLParser.ID, 0); }
		public ITerminalNode DOT() { return GetToken(FOOLParser.DOT, 0); }
		public FunctioncallContext functioncall() {
			return GetRuleContext<FunctioncallContext>(0);
		}
		public MethExpContext(ValueContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFOOLVisitor<TResult> typedVisitor = visitor as IFOOLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NewExpContext : ValueContext {
		public ITerminalNode NEW() { return GetToken(FOOLParser.NEW, 0); }
		public ITerminalNode ID() { return GetToken(FOOLParser.ID, 0); }
		public ITerminalNode LPAR() { return GetToken(FOOLParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(FOOLParser.RPAR, 0); }
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(FOOLParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(FOOLParser.COMMA, i);
		}
		public NewExpContext(ValueContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFOOLVisitor<TResult> typedVisitor = visitor as IFOOLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IfExpContext : ValueContext {
		public ExpContext cond;
		public ExpContext thenBranch;
		public ExpContext elseBranch;
		public ITerminalNode IF() { return GetToken(FOOLParser.IF, 0); }
		public ITerminalNode THEN() { return GetToken(FOOLParser.THEN, 0); }
		public ITerminalNode[] CLPAR() { return GetTokens(FOOLParser.CLPAR); }
		public ITerminalNode CLPAR(int i) {
			return GetToken(FOOLParser.CLPAR, i);
		}
		public ITerminalNode[] SEMIC() { return GetTokens(FOOLParser.SEMIC); }
		public ITerminalNode SEMIC(int i) {
			return GetToken(FOOLParser.SEMIC, i);
		}
		public ITerminalNode[] CRPAR() { return GetTokens(FOOLParser.CRPAR); }
		public ITerminalNode CRPAR(int i) {
			return GetToken(FOOLParser.CRPAR, i);
		}
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public ITerminalNode ELSE() { return GetToken(FOOLParser.ELSE, 0); }
		public IfExpContext(ValueContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFOOLVisitor<TResult> typedVisitor = visitor as IFOOLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BoolValContext : ValueContext {
		public ITerminalNode TRUE() { return GetToken(FOOLParser.TRUE, 0); }
		public ITerminalNode FALSE() { return GetToken(FOOLParser.FALSE, 0); }
		public ITerminalNode NOT() { return GetToken(FOOLParser.NOT, 0); }
		public BoolValContext(ValueContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFOOLVisitor<TResult> typedVisitor = visitor as IFOOLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolVal(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunExpContext : ValueContext {
		public FunctioncallContext functioncall() {
			return GetRuleContext<FunctioncallContext>(0);
		}
		public FunExpContext(ValueContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFOOLVisitor<TResult> typedVisitor = visitor as IFOOLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VarIdContext : ValueContext {
		public ITerminalNode ID() { return GetToken(FOOLParser.ID, 0); }
		public ITerminalNode MINUS() { return GetToken(FOOLParser.MINUS, 0); }
		public ITerminalNode NOT() { return GetToken(FOOLParser.NOT, 0); }
		public VarIdContext(ValueContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFOOLVisitor<TResult> typedVisitor = visitor as IFOOLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarId(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(Context, State);
		EnterRule(_localctx, 26, RULE_value);
		int _la;
		try {
			State = 219;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
			case 1:
				_localctx = new IntValContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 171;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==MINUS) {
					{
					State = 170; Match(MINUS);
					}
				}

				State = 173; Match(INTEGER);
				}
				break;
			case 2:
				_localctx = new BoolValContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 175;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NOT) {
					{
					State = 174; Match(NOT);
					}
				}

				State = 177;
				_la = TokenStream.LA(1);
				if ( !(_la==TRUE || _la==FALSE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 3:
				_localctx = new BaseExpContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 178; Match(LPAR);
				State = 179; exp();
				State = 180; Match(RPAR);
				}
				break;
			case 4:
				_localctx = new IfExpContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 182; Match(IF);
				State = 183; ((IfExpContext)_localctx).cond = exp();
				State = 184; Match(THEN);
				State = 185; Match(CLPAR);
				State = 186; ((IfExpContext)_localctx).thenBranch = exp();
				State = 187; Match(SEMIC);
				State = 188; Match(CRPAR);
				State = 195;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ELSE) {
					{
					State = 189; Match(ELSE);
					State = 190; Match(CLPAR);
					State = 191; ((IfExpContext)_localctx).elseBranch = exp();
					State = 192; Match(SEMIC);
					State = 193; Match(CRPAR);
					}
				}

				}
				break;
			case 5:
				_localctx = new VarIdContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 198;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==MINUS || _la==NOT) {
					{
					State = 197;
					_la = TokenStream.LA(1);
					if ( !(_la==MINUS || _la==NOT) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 200; Match(ID);
				}
				break;
			case 6:
				_localctx = new FunExpContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 201; functioncall();
				}
				break;
			case 7:
				_localctx = new MethExpContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 202; Match(ID);
				State = 203; Match(DOT);
				State = 204; functioncall();
				}
				break;
			case 8:
				_localctx = new NewExpContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 205; Match(NEW);
				State = 206; Match(ID);
				State = 207; Match(LPAR);
				State = 216;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << MINUS) | (1L << TRUE) | (1L << FALSE) | (1L << LPAR) | (1L << IF) | (1L << NOT) | (1L << NEW) | (1L << INTEGER) | (1L << ID))) != 0)) {
					{
					State = 208; exp();
					State = 213;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
						{
						State = 209; Match(COMMA);
						State = 210; exp();
						}
						}
						State = 215;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 218; Match(RPAR);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctioncallContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(FOOLParser.ID, 0); }
		public ITerminalNode LPAR() { return GetToken(FOOLParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(FOOLParser.RPAR, 0); }
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(FOOLParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(FOOLParser.COMMA, i);
		}
		public FunctioncallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functioncall; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFOOLVisitor<TResult> typedVisitor = visitor as IFOOLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctioncall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctioncallContext functioncall() {
		FunctioncallContext _localctx = new FunctioncallContext(Context, State);
		EnterRule(_localctx, 28, RULE_functioncall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 221; Match(ID);
			State = 222; Match(LPAR);
			State = 231;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << MINUS) | (1L << TRUE) | (1L << FALSE) | (1L << LPAR) | (1L << IF) | (1L << NOT) | (1L << NEW) | (1L << INTEGER) | (1L << ID))) != 0)) {
				{
				State = 223; exp();
				State = 228;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 224; Match(COMMA);
					State = 225; exp();
					}
					}
					State = 230;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 233; Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StmContext : ParserRuleContext {
		public StmContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stm; } }
	 
		public StmContext() { }
		public virtual void CopyFrom(StmContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IfStmContext : StmContext {
		public ExpContext cond;
		public StmsContext thenBranch;
		public StmsContext elseBranch;
		public ITerminalNode IF() { return GetToken(FOOLParser.IF, 0); }
		public ITerminalNode LPAR() { return GetToken(FOOLParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(FOOLParser.RPAR, 0); }
		public ITerminalNode THEN() { return GetToken(FOOLParser.THEN, 0); }
		public ITerminalNode[] CLPAR() { return GetTokens(FOOLParser.CLPAR); }
		public ITerminalNode CLPAR(int i) {
			return GetToken(FOOLParser.CLPAR, i);
		}
		public ITerminalNode[] CRPAR() { return GetTokens(FOOLParser.CRPAR); }
		public ITerminalNode CRPAR(int i) {
			return GetToken(FOOLParser.CRPAR, i);
		}
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public StmsContext[] stms() {
			return GetRuleContexts<StmsContext>();
		}
		public StmsContext stms(int i) {
			return GetRuleContext<StmsContext>(i);
		}
		public ITerminalNode ELSE() { return GetToken(FOOLParser.ELSE, 0); }
		public IfStmContext(StmContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFOOLVisitor<TResult> typedVisitor = visitor as IFOOLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStm(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AsmStmContext : StmContext {
		public ITerminalNode ID() { return GetToken(FOOLParser.ID, 0); }
		public ITerminalNode ASM() { return GetToken(FOOLParser.ASM, 0); }
		public ITerminalNode NULL() { return GetToken(FOOLParser.NULL, 0); }
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public AsmStmContext(StmContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFOOLVisitor<TResult> typedVisitor = visitor as IFOOLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAsmStm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StmContext stm() {
		StmContext _localctx = new StmContext(Context, State);
		EnterRule(_localctx, 30, RULE_stm);
		int _la;
		try {
			State = 256;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ID:
				_localctx = new AsmStmContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 235; Match(ID);
				State = 236; Match(ASM);
				State = 239;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case NULL:
					{
					State = 237; Match(NULL);
					}
					break;
				case MINUS:
				case TRUE:
				case FALSE:
				case LPAR:
				case IF:
				case NOT:
				case NEW:
				case INTEGER:
				case ID:
					{
					State = 238; exp();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case IF:
				_localctx = new IfStmContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 241; Match(IF);
				State = 242; Match(LPAR);
				State = 243; ((IfStmContext)_localctx).cond = exp();
				State = 244; Match(RPAR);
				State = 245; Match(THEN);
				State = 246; Match(CLPAR);
				State = 247; ((IfStmContext)_localctx).thenBranch = stms();
				State = 248; Match(CRPAR);
				State = 254;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ELSE) {
					{
					State = 249; Match(ELSE);
					State = 250; Match(CLPAR);
					State = 251; ((IfStmContext)_localctx).elseBranch = stms();
					State = 252; Match(CRPAR);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StmsContext : ParserRuleContext {
		public StmContext[] stm() {
			return GetRuleContexts<StmContext>();
		}
		public StmContext stm(int i) {
			return GetRuleContext<StmContext>(i);
		}
		public ITerminalNode[] SEMIC() { return GetTokens(FOOLParser.SEMIC); }
		public ITerminalNode SEMIC(int i) {
			return GetToken(FOOLParser.SEMIC, i);
		}
		public StmsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stms; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFOOLVisitor<TResult> typedVisitor = visitor as IFOOLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStms(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StmsContext stms() {
		StmsContext _localctx = new StmsContext(Context, State);
		EnterRule(_localctx, 32, RULE_stms);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 261;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 258; stm();
				State = 259; Match(SEMIC);
				}
				}
				State = 263;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==IF || _la==ID );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '-', '\x10C', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x5', '\x2', '.', '\n', '\x2', '\x3', 
		'\x2', '\x6', '\x2', '\x31', '\n', '\x2', '\r', '\x2', '\xE', '\x2', '\x32', 
		'\x3', '\x2', '\x5', '\x2', '\x36', '\n', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x5', '\x2', '=', '\n', 
		'\x2', '\x5', '\x2', '?', '\n', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x6', '\x3', '\x45', '\n', '\x3', '\r', '\x3', '\xE', 
		'\x3', '\x46', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x5', '\x4', 'M', '\n', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\a', '\x4', 'S', '\n', '\x4', '\f', '\x4', '\xE', '\x4', 
		'V', '\v', '\x4', '\x3', '\x4', '\x3', '\x4', '\x5', '\x4', 'Z', '\n', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\a', '\x4', '^', '\n', '\x4', '\f', 
		'\x4', '\xE', '\x4', '\x61', '\v', '\x4', '\x3', '\x4', '\x5', '\x4', 
		'\x64', '\n', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', '\x3', 
		'\x5', '\x6', '\x5', 'j', '\n', '\x5', '\r', '\x5', '\xE', '\x5', 'k', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x5', '\a', 'u', '\n', '\a', '\x3', '\b', '\x3', '\b', 
		'\x5', '\b', 'y', '\n', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\a', '\b', '\x80', '\n', '\b', '\f', '\b', '\xE', 
		'\b', '\x83', '\v', '\b', '\x5', '\b', '\x85', '\n', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x5', '\b', '\x8C', 
		'\n', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x5', 
		'\b', '\x92', '\n', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', 
		'\t', '\x5', '\t', '\x98', '\n', '\t', '\x3', '\n', '\x3', '\n', '\x3', 
		'\v', '\x3', '\v', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x5', '\f', 
		'\xA1', '\n', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x5', '\r', 
		'\xA6', '\n', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x5', '\xE', 
		'\xAB', '\n', '\xE', '\x3', '\xF', '\x5', '\xF', '\xAE', '\n', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x5', '\xF', '\xB2', '\n', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x5', '\xF', '\xC6', '\n', '\xF', 
		'\x3', '\xF', '\x5', '\xF', '\xC9', '\n', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\a', '\xF', 
		'\xD6', '\n', '\xF', '\f', '\xF', '\xE', '\xF', '\xD9', '\v', '\xF', '\x5', 
		'\xF', '\xDB', '\n', '\xF', '\x3', '\xF', '\x5', '\xF', '\xDE', '\n', 
		'\xF', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', 
		'\x10', '\a', '\x10', '\xE5', '\n', '\x10', '\f', '\x10', '\xE', '\x10', 
		'\xE8', '\v', '\x10', '\x5', '\x10', '\xEA', '\n', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x5', '\x11', '\xF2', '\n', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x5', '\x11', '\x101', '\n', '\x11', '\x5', '\x11', '\x103', 
		'\n', '\x11', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x6', '\x12', 
		'\x108', '\n', '\x12', '\r', '\x12', '\xE', '\x12', '\x109', '\x3', '\x12', 
		'\x2', '\x2', '\x13', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', 
		'\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '\x2', 
		'\b', '\x4', '\x2', '\x19', '\x1A', '*', '*', '\x3', '\x2', '\b', '\t', 
		'\x3', '\x2', '\n', '\v', '\x5', '\x2', '\x6', '\x6', '\x1B', '\x1C', 
		'\x1E', '!', '\x3', '\x2', '\f', '\r', '\x4', '\x2', '\t', '\t', '\x1D', 
		'\x1D', '\x2', '\x124', '\x2', '>', '\x3', '\x2', '\x2', '\x2', '\x4', 
		'@', '\x3', '\x2', '\x2', '\x2', '\x6', 'H', '\x3', '\x2', '\x2', '\x2', 
		'\b', 'g', '\x3', '\x2', '\x2', '\x2', '\n', 'm', '\x3', '\x2', '\x2', 
		'\x2', '\f', 'p', '\x3', '\x2', '\x2', '\x2', '\xE', 'x', '\x3', '\x2', 
		'\x2', '\x2', '\x10', '\x97', '\x3', '\x2', '\x2', '\x2', '\x12', '\x99', 
		'\x3', '\x2', '\x2', '\x2', '\x14', '\x9B', '\x3', '\x2', '\x2', '\x2', 
		'\x16', '\x9D', '\x3', '\x2', '\x2', '\x2', '\x18', '\xA2', '\x3', '\x2', 
		'\x2', '\x2', '\x1A', '\xA7', '\x3', '\x2', '\x2', '\x2', '\x1C', '\xDD', 
		'\x3', '\x2', '\x2', '\x2', '\x1E', '\xDF', '\x3', '\x2', '\x2', '\x2', 
		' ', '\x102', '\x3', '\x2', '\x2', '\x2', '\"', '\x107', '\x3', '\x2', 
		'\x2', '\x2', '$', '%', '\x5', '\x16', '\f', '\x2', '%', '&', '\a', '\x3', 
		'\x2', '\x2', '&', '?', '\x3', '\x2', '\x2', '\x2', '\'', '(', '\x5', 
		'\x4', '\x3', '\x2', '(', '-', '\a', '\x16', '\x2', '\x2', ')', '*', '\x5', 
		'\x16', '\f', '\x2', '*', '+', '\a', '\x3', '\x2', '\x2', '+', '.', '\x3', 
		'\x2', '\x2', '\x2', ',', '.', '\x5', '\"', '\x12', '\x2', '-', ')', '\x3', 
		'\x2', '\x2', '\x2', '-', ',', '\x3', '\x2', '\x2', '\x2', '.', '?', '\x3', 
		'\x2', '\x2', '\x2', '/', '\x31', '\x5', '\x6', '\x4', '\x2', '\x30', 
		'/', '\x3', '\x2', '\x2', '\x2', '\x31', '\x32', '\x3', '\x2', '\x2', 
		'\x2', '\x32', '\x30', '\x3', '\x2', '\x2', '\x2', '\x32', '\x33', '\x3', 
		'\x2', '\x2', '\x2', '\x33', '\x35', '\x3', '\x2', '\x2', '\x2', '\x34', 
		'\x36', '\x5', '\x4', '\x3', '\x2', '\x35', '\x34', '\x3', '\x2', '\x2', 
		'\x2', '\x35', '\x36', '\x3', '\x2', '\x2', '\x2', '\x36', '\x37', '\x3', 
		'\x2', '\x2', '\x2', '\x37', '<', '\a', '\x16', '\x2', '\x2', '\x38', 
		'\x39', '\x5', '\x16', '\f', '\x2', '\x39', ':', '\a', '\x3', '\x2', '\x2', 
		':', '=', '\x3', '\x2', '\x2', '\x2', ';', '=', '\x5', '\"', '\x12', '\x2', 
		'<', '\x38', '\x3', '\x2', '\x2', '\x2', '<', ';', '\x3', '\x2', '\x2', 
		'\x2', '=', '?', '\x3', '\x2', '\x2', '\x2', '>', '$', '\x3', '\x2', '\x2', 
		'\x2', '>', '\'', '\x3', '\x2', '\x2', '\x2', '>', '\x30', '\x3', '\x2', 
		'\x2', '\x2', '?', '\x3', '\x3', '\x2', '\x2', '\x2', '@', '\x44', '\a', 
		'\x15', '\x2', '\x2', '\x41', '\x42', '\x5', '\x10', '\t', '\x2', '\x42', 
		'\x43', '\a', '\x3', '\x2', '\x2', '\x43', '\x45', '\x3', '\x2', '\x2', 
		'\x2', '\x44', '\x41', '\x3', '\x2', '\x2', '\x2', '\x45', '\x46', '\x3', 
		'\x2', '\x2', '\x2', '\x46', '\x44', '\x3', '\x2', '\x2', '\x2', '\x46', 
		'G', '\x3', '\x2', '\x2', '\x2', 'G', '\x5', '\x3', '\x2', '\x2', '\x2', 
		'H', 'I', '\a', '#', '\x2', '\x2', 'I', 'L', '\a', '*', '\x2', '\x2', 
		'J', 'K', '\a', '\'', '\x2', '\x2', 'K', 'M', '\a', '*', '\x2', '\x2', 
		'L', 'J', '\x3', '\x2', '\x2', '\x2', 'L', 'M', '\x3', '\x2', '\x2', '\x2', 
		'M', 'Y', '\x3', '\x2', '\x2', '\x2', 'N', 'O', '\a', '\xE', '\x2', '\x2', 
		'O', 'T', '\x5', '\n', '\x6', '\x2', 'P', 'Q', '\a', '\x5', '\x2', '\x2', 
		'Q', 'S', '\x5', '\n', '\x6', '\x2', 'R', 'P', '\x3', '\x2', '\x2', '\x2', 
		'S', 'V', '\x3', '\x2', '\x2', '\x2', 'T', 'R', '\x3', '\x2', '\x2', '\x2', 
		'T', 'U', '\x3', '\x2', '\x2', '\x2', 'U', 'W', '\x3', '\x2', '\x2', '\x2', 
		'V', 'T', '\x3', '\x2', '\x2', '\x2', 'W', 'X', '\a', '\xF', '\x2', '\x2', 
		'X', 'Z', '\x3', '\x2', '\x2', '\x2', 'Y', 'N', '\x3', '\x2', '\x2', '\x2', 
		'Y', 'Z', '\x3', '\x2', '\x2', '\x2', 'Z', '\x63', '\x3', '\x2', '\x2', 
		'\x2', '[', '_', '\a', '\x10', '\x2', '\x2', '\\', '^', '\x5', '\x12', 
		'\n', '\x2', ']', '\\', '\x3', '\x2', '\x2', '\x2', '^', '\x61', '\x3', 
		'\x2', '\x2', '\x2', '_', ']', '\x3', '\x2', '\x2', '\x2', '_', '`', '\x3', 
		'\x2', '\x2', '\x2', '`', '\x62', '\x3', '\x2', '\x2', '\x2', '\x61', 
		'_', '\x3', '\x2', '\x2', '\x2', '\x62', '\x64', '\a', '\x11', '\x2', 
		'\x2', '\x63', '[', '\x3', '\x2', '\x2', '\x2', '\x63', '\x64', '\x3', 
		'\x2', '\x2', '\x2', '\x64', '\x65', '\x3', '\x2', '\x2', '\x2', '\x65', 
		'\x66', '\a', '\x3', '\x2', '\x2', '\x66', '\a', '\x3', '\x2', '\x2', 
		'\x2', 'g', 'i', '\a', '\x15', '\x2', '\x2', 'h', 'j', '\x5', '\f', '\a', 
		'\x2', 'i', 'h', '\x3', '\x2', '\x2', '\x2', 'j', 'k', '\x3', '\x2', '\x2', 
		'\x2', 'k', 'i', '\x3', '\x2', '\x2', '\x2', 'k', 'l', '\x3', '\x2', '\x2', 
		'\x2', 'l', '\t', '\x3', '\x2', '\x2', '\x2', 'm', 'n', '\x5', '\x14', 
		'\v', '\x2', 'n', 'o', '\a', '*', '\x2', '\x2', 'o', '\v', '\x3', '\x2', 
		'\x2', '\x2', 'p', 'q', '\x5', '\n', '\x6', '\x2', 'q', 't', '\a', '\a', 
		'\x2', '\x2', 'r', 'u', '\x5', '\x16', '\f', '\x2', 's', 'u', '\a', '(', 
		'\x2', '\x2', 't', 'r', '\x3', '\x2', '\x2', '\x2', 't', 's', '\x3', '\x2', 
		'\x2', '\x2', 'u', '\r', '\x3', '\x2', '\x2', '\x2', 'v', 'y', '\a', '\"', 
		'\x2', '\x2', 'w', 'y', '\x5', '\x14', '\v', '\x2', 'x', 'v', '\x3', '\x2', 
		'\x2', '\x2', 'x', 'w', '\x3', '\x2', '\x2', '\x2', 'y', 'z', '\x3', '\x2', 
		'\x2', '\x2', 'z', '{', '\a', '*', '\x2', '\x2', '{', '\x84', '\a', '\xE', 
		'\x2', '\x2', '|', '\x81', '\x5', '\n', '\x6', '\x2', '}', '~', '\a', 
		'\x5', '\x2', '\x2', '~', '\x80', '\x5', '\n', '\x6', '\x2', '\x7F', '}', 
		'\x3', '\x2', '\x2', '\x2', '\x80', '\x83', '\x3', '\x2', '\x2', '\x2', 
		'\x81', '\x7F', '\x3', '\x2', '\x2', '\x2', '\x81', '\x82', '\x3', '\x2', 
		'\x2', '\x2', '\x82', '\x85', '\x3', '\x2', '\x2', '\x2', '\x83', '\x81', 
		'\x3', '\x2', '\x2', '\x2', '\x84', '|', '\x3', '\x2', '\x2', '\x2', '\x84', 
		'\x85', '\x3', '\x2', '\x2', '\x2', '\x85', '\x86', '\x3', '\x2', '\x2', 
		'\x2', '\x86', '\x87', '\a', '\xF', '\x2', '\x2', '\x87', '\x8B', '\a', 
		'\x10', '\x2', '\x2', '\x88', '\x89', '\x5', '\b', '\x5', '\x2', '\x89', 
		'\x8A', '\a', '\x16', '\x2', '\x2', '\x8A', '\x8C', '\x3', '\x2', '\x2', 
		'\x2', '\x8B', '\x88', '\x3', '\x2', '\x2', '\x2', '\x8B', '\x8C', '\x3', 
		'\x2', '\x2', '\x2', '\x8C', '\x91', '\x3', '\x2', '\x2', '\x2', '\x8D', 
		'\x8E', '\x5', '\x16', '\f', '\x2', '\x8E', '\x8F', '\a', '\x3', '\x2', 
		'\x2', '\x8F', '\x92', '\x3', '\x2', '\x2', '\x2', '\x90', '\x92', '\x5', 
		'\"', '\x12', '\x2', '\x91', '\x8D', '\x3', '\x2', '\x2', '\x2', '\x91', 
		'\x90', '\x3', '\x2', '\x2', '\x2', '\x92', '\x93', '\x3', '\x2', '\x2', 
		'\x2', '\x93', '\x94', '\a', '\x11', '\x2', '\x2', '\x94', '\xF', '\x3', 
		'\x2', '\x2', '\x2', '\x95', '\x98', '\x5', '\f', '\a', '\x2', '\x96', 
		'\x98', '\x5', '\xE', '\b', '\x2', '\x97', '\x95', '\x3', '\x2', '\x2', 
		'\x2', '\x97', '\x96', '\x3', '\x2', '\x2', '\x2', '\x98', '\x11', '\x3', 
		'\x2', '\x2', '\x2', '\x99', '\x9A', '\x5', '\xE', '\b', '\x2', '\x9A', 
		'\x13', '\x3', '\x2', '\x2', '\x2', '\x9B', '\x9C', '\t', '\x2', '\x2', 
		'\x2', '\x9C', '\x15', '\x3', '\x2', '\x2', '\x2', '\x9D', '\xA0', '\x5', 
		'\x18', '\r', '\x2', '\x9E', '\x9F', '\t', '\x3', '\x2', '\x2', '\x9F', 
		'\xA1', '\x5', '\x16', '\f', '\x2', '\xA0', '\x9E', '\x3', '\x2', '\x2', 
		'\x2', '\xA0', '\xA1', '\x3', '\x2', '\x2', '\x2', '\xA1', '\x17', '\x3', 
		'\x2', '\x2', '\x2', '\xA2', '\xA5', '\x5', '\x1A', '\xE', '\x2', '\xA3', 
		'\xA4', '\t', '\x4', '\x2', '\x2', '\xA4', '\xA6', '\x5', '\x18', '\r', 
		'\x2', '\xA5', '\xA3', '\x3', '\x2', '\x2', '\x2', '\xA5', '\xA6', '\x3', 
		'\x2', '\x2', '\x2', '\xA6', '\x19', '\x3', '\x2', '\x2', '\x2', '\xA7', 
		'\xAA', '\x5', '\x1C', '\xF', '\x2', '\xA8', '\xA9', '\t', '\x5', '\x2', 
		'\x2', '\xA9', '\xAB', '\x5', '\x1A', '\xE', '\x2', '\xAA', '\xA8', '\x3', 
		'\x2', '\x2', '\x2', '\xAA', '\xAB', '\x3', '\x2', '\x2', '\x2', '\xAB', 
		'\x1B', '\x3', '\x2', '\x2', '\x2', '\xAC', '\xAE', '\a', '\t', '\x2', 
		'\x2', '\xAD', '\xAC', '\x3', '\x2', '\x2', '\x2', '\xAD', '\xAE', '\x3', 
		'\x2', '\x2', '\x2', '\xAE', '\xAF', '\x3', '\x2', '\x2', '\x2', '\xAF', 
		'\xDE', '\a', ')', '\x2', '\x2', '\xB0', '\xB2', '\a', '\x1D', '\x2', 
		'\x2', '\xB1', '\xB0', '\x3', '\x2', '\x2', '\x2', '\xB1', '\xB2', '\x3', 
		'\x2', '\x2', '\x2', '\xB2', '\xB3', '\x3', '\x2', '\x2', '\x2', '\xB3', 
		'\xDE', '\t', '\x6', '\x2', '\x2', '\xB4', '\xB5', '\a', '\xE', '\x2', 
		'\x2', '\xB5', '\xB6', '\x5', '\x16', '\f', '\x2', '\xB6', '\xB7', '\a', 
		'\xF', '\x2', '\x2', '\xB7', '\xDE', '\x3', '\x2', '\x2', '\x2', '\xB8', 
		'\xB9', '\a', '\x12', '\x2', '\x2', '\xB9', '\xBA', '\x5', '\x16', '\f', 
		'\x2', '\xBA', '\xBB', '\a', '\x13', '\x2', '\x2', '\xBB', '\xBC', '\a', 
		'\x10', '\x2', '\x2', '\xBC', '\xBD', '\x5', '\x16', '\f', '\x2', '\xBD', 
		'\xBE', '\a', '\x3', '\x2', '\x2', '\xBE', '\xC5', '\a', '\x11', '\x2', 
		'\x2', '\xBF', '\xC0', '\a', '\x14', '\x2', '\x2', '\xC0', '\xC1', '\a', 
		'\x10', '\x2', '\x2', '\xC1', '\xC2', '\x5', '\x16', '\f', '\x2', '\xC2', 
		'\xC3', '\a', '\x3', '\x2', '\x2', '\xC3', '\xC4', '\a', '\x11', '\x2', 
		'\x2', '\xC4', '\xC6', '\x3', '\x2', '\x2', '\x2', '\xC5', '\xBF', '\x3', 
		'\x2', '\x2', '\x2', '\xC5', '\xC6', '\x3', '\x2', '\x2', '\x2', '\xC6', 
		'\xDE', '\x3', '\x2', '\x2', '\x2', '\xC7', '\xC9', '\t', '\a', '\x2', 
		'\x2', '\xC8', '\xC7', '\x3', '\x2', '\x2', '\x2', '\xC8', '\xC9', '\x3', 
		'\x2', '\x2', '\x2', '\xC9', '\xCA', '\x3', '\x2', '\x2', '\x2', '\xCA', 
		'\xDE', '\a', '*', '\x2', '\x2', '\xCB', '\xDE', '\x5', '\x1E', '\x10', 
		'\x2', '\xCC', '\xCD', '\a', '*', '\x2', '\x2', '\xCD', '\xCE', '\a', 
		'&', '\x2', '\x2', '\xCE', '\xDE', '\x5', '\x1E', '\x10', '\x2', '\xCF', 
		'\xD0', '\a', '%', '\x2', '\x2', '\xD0', '\xD1', '\a', '*', '\x2', '\x2', 
		'\xD1', '\xDA', '\a', '\xE', '\x2', '\x2', '\xD2', '\xD7', '\x5', '\x16', 
		'\f', '\x2', '\xD3', '\xD4', '\a', '\x5', '\x2', '\x2', '\xD4', '\xD6', 
		'\x5', '\x16', '\f', '\x2', '\xD5', '\xD3', '\x3', '\x2', '\x2', '\x2', 
		'\xD6', '\xD9', '\x3', '\x2', '\x2', '\x2', '\xD7', '\xD5', '\x3', '\x2', 
		'\x2', '\x2', '\xD7', '\xD8', '\x3', '\x2', '\x2', '\x2', '\xD8', '\xDB', 
		'\x3', '\x2', '\x2', '\x2', '\xD9', '\xD7', '\x3', '\x2', '\x2', '\x2', 
		'\xDA', '\xD2', '\x3', '\x2', '\x2', '\x2', '\xDA', '\xDB', '\x3', '\x2', 
		'\x2', '\x2', '\xDB', '\xDC', '\x3', '\x2', '\x2', '\x2', '\xDC', '\xDE', 
		'\a', '\xF', '\x2', '\x2', '\xDD', '\xAD', '\x3', '\x2', '\x2', '\x2', 
		'\xDD', '\xB1', '\x3', '\x2', '\x2', '\x2', '\xDD', '\xB4', '\x3', '\x2', 
		'\x2', '\x2', '\xDD', '\xB8', '\x3', '\x2', '\x2', '\x2', '\xDD', '\xC8', 
		'\x3', '\x2', '\x2', '\x2', '\xDD', '\xCB', '\x3', '\x2', '\x2', '\x2', 
		'\xDD', '\xCC', '\x3', '\x2', '\x2', '\x2', '\xDD', '\xCF', '\x3', '\x2', 
		'\x2', '\x2', '\xDE', '\x1D', '\x3', '\x2', '\x2', '\x2', '\xDF', '\xE0', 
		'\a', '*', '\x2', '\x2', '\xE0', '\xE9', '\a', '\xE', '\x2', '\x2', '\xE1', 
		'\xE6', '\x5', '\x16', '\f', '\x2', '\xE2', '\xE3', '\a', '\x5', '\x2', 
		'\x2', '\xE3', '\xE5', '\x5', '\x16', '\f', '\x2', '\xE4', '\xE2', '\x3', 
		'\x2', '\x2', '\x2', '\xE5', '\xE8', '\x3', '\x2', '\x2', '\x2', '\xE6', 
		'\xE4', '\x3', '\x2', '\x2', '\x2', '\xE6', '\xE7', '\x3', '\x2', '\x2', 
		'\x2', '\xE7', '\xEA', '\x3', '\x2', '\x2', '\x2', '\xE8', '\xE6', '\x3', 
		'\x2', '\x2', '\x2', '\xE9', '\xE1', '\x3', '\x2', '\x2', '\x2', '\xE9', 
		'\xEA', '\x3', '\x2', '\x2', '\x2', '\xEA', '\xEB', '\x3', '\x2', '\x2', 
		'\x2', '\xEB', '\xEC', '\a', '\xF', '\x2', '\x2', '\xEC', '\x1F', '\x3', 
		'\x2', '\x2', '\x2', '\xED', '\xEE', '\a', '*', '\x2', '\x2', '\xEE', 
		'\xF1', '\a', '\a', '\x2', '\x2', '\xEF', '\xF2', '\a', '(', '\x2', '\x2', 
		'\xF0', '\xF2', '\x5', '\x16', '\f', '\x2', '\xF1', '\xEF', '\x3', '\x2', 
		'\x2', '\x2', '\xF1', '\xF0', '\x3', '\x2', '\x2', '\x2', '\xF2', '\x103', 
		'\x3', '\x2', '\x2', '\x2', '\xF3', '\xF4', '\a', '\x12', '\x2', '\x2', 
		'\xF4', '\xF5', '\a', '\xE', '\x2', '\x2', '\xF5', '\xF6', '\x5', '\x16', 
		'\f', '\x2', '\xF6', '\xF7', '\a', '\xF', '\x2', '\x2', '\xF7', '\xF8', 
		'\a', '\x13', '\x2', '\x2', '\xF8', '\xF9', '\a', '\x10', '\x2', '\x2', 
		'\xF9', '\xFA', '\x5', '\"', '\x12', '\x2', '\xFA', '\x100', '\a', '\x11', 
		'\x2', '\x2', '\xFB', '\xFC', '\a', '\x14', '\x2', '\x2', '\xFC', '\xFD', 
		'\a', '\x10', '\x2', '\x2', '\xFD', '\xFE', '\x5', '\"', '\x12', '\x2', 
		'\xFE', '\xFF', '\a', '\x11', '\x2', '\x2', '\xFF', '\x101', '\x3', '\x2', 
		'\x2', '\x2', '\x100', '\xFB', '\x3', '\x2', '\x2', '\x2', '\x100', '\x101', 
		'\x3', '\x2', '\x2', '\x2', '\x101', '\x103', '\x3', '\x2', '\x2', '\x2', 
		'\x102', '\xED', '\x3', '\x2', '\x2', '\x2', '\x102', '\xF3', '\x3', '\x2', 
		'\x2', '\x2', '\x103', '!', '\x3', '\x2', '\x2', '\x2', '\x104', '\x105', 
		'\x5', ' ', '\x11', '\x2', '\x105', '\x106', '\a', '\x3', '\x2', '\x2', 
		'\x106', '\x108', '\x3', '\x2', '\x2', '\x2', '\x107', '\x104', '\x3', 
		'\x2', '\x2', '\x2', '\x108', '\x109', '\x3', '\x2', '\x2', '\x2', '\x109', 
		'\x107', '\x3', '\x2', '\x2', '\x2', '\x109', '\x10A', '\x3', '\x2', '\x2', 
		'\x2', '\x10A', '#', '\x3', '\x2', '\x2', '\x2', '%', '-', '\x32', '\x35', 
		'<', '>', '\x46', 'L', 'T', 'Y', '_', '\x63', 'k', 't', 'x', '\x81', '\x84', 
		'\x8B', '\x91', '\x97', '\xA0', '\xA5', '\xAA', '\xAD', '\xB1', '\xC5', 
		'\xC8', '\xD7', '\xDA', '\xDD', '\xE6', '\xE9', '\xF1', '\x100', '\x102', 
		'\x109',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
